## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name,age){
paste("Hello, my name is ", name, ", I am ", toString(age), " years old")
}
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
for(strin in v){
if (str_detect(strin, "[0-9]")) {
print("Oh no!")
} else {
print("Yay!")
}
}
## a2-foundational-skills
## -------------------- Set up --------------------
## In this assignment we ask you to use `stringr` package for the string functions.
## Read more about it in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
## Install the library if needed and load it
## Ensure you don't install the library more than once!
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## ---------- Example: ----------
## Create variable `my_name` that is equal to your first name
my_name <- "Max"
## ---------- end of the example ----------
## Create a numeric variable `my_age` that is equal to your age
my_age <- 20
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 24 * 60
#24 hours*60 minutes
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- 24*365
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
## Compute the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
sec_in_year <- 365*24*60*60
#365 days in a year
#24 hours in a day
#60 minutes in an hour
#60 seconds in a minute
## How many seconds is a typical human lifetime?
sec_in_life <- sec_in_year*70
#avg age of life 70 yearsish?
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
uni_in_sec <- 13800000000 * sec_in_year
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computer,
## we can safely say that your code fails :-)
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name,age){
paste("Hello, my name is ", name, ", I am ", toString(age), " years old")
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable.  Check out base R functions 'sub' and 'gsub', and stringr functions 'str_replace' and 'str_replace_all'
casual_intro <- sub("Hello, my name is","Hey, I'm", my_intro)
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- toupper(my_intro)
#gsub doesnt really work here?
#not specified to use here?
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro <- tolower(my_intro)
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
str_count <- str_count(my_intro, "e")
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(number){
return(number*2)
}
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- double(minutes_in_day)
## Write another function `third_power` that takes in a value and returns that value cubed
cube <- function(number){
return(number*number*number)
}
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- cube(3)
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("ratatoullie", "no_country_for_old_men", "get_out", "the_spectacular_now","the_graduate", "the_social_network")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- c(movies[1:3])
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, " is a great movie!")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- remove
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(from = 700, to = 999, by = 1)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
## Create a vector `lower_numbers` that is the numbers 600:699
lower_numbers <- numbers <- seq(from = 600, to = 699, by = 1)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(numbers, lower_numbers)
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
## Always print your results!
## Note: if you just 'cat' a date, it justprints the unix epoch number.  Try to 'format' the date like
## cat(format(date))
today <- as.Date("2019-04-19")
cat(format(today))
## Create a variable `anniversary` that represents the 50th anniversary of the first Moon landings (July 20, 2019).
## Make sure to use the `as.Date` function again
anniversary <- as.Date("2019-07-16")
## Create a variable `days_to_anniversary` that is how many days until the anniversary (hint: subtract the dates!)
days_to_anniversary <- anniversary - today
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, bd){
birth <- as.Date(bd)
today <- as.Date("2019-04-19")
days <- today - birth
cat("Hello, my name is ", name, ", I am ", toString(age), " years old. In ",
days, "days I'll be", age+1
)
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "1998-09-15")
##cant figure out how to ingore years
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(v){
gsub("[0-9]", "", v)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
v <- RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
for(strin in v){
if (str_detect(strin, "[0-9]")) {
print("Oh no!")
} else {
print("Yay!")
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("jsonlite")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
##install.packages("devtools", "jsonlite")
library("jsonlite","devtools" )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nyt_key <- FgDKOoYvS4TJtKOi6u0onrnsbFiG029H
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nyt_data <- fromJSON("https://api.nytimes.com/svc/archive/v1/2018/8.json&api-key=KMhnMnUBhoBdUdRy")
nyt_data <- fromJSON("https://api.nytimes.com/svc/archive/v1/2018/8.json&api-key=yWbZaGu4aJnMzFhiAh5IVNUXLAwPOVbp")
nyt_key <- "yWbZaGu4aJnMzFhiAh5IVNUXLAwPOVbp"
nyt_url <- paste0("https://api.nytimes.com/svc/archive/v1/2018/8.json&, )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/nyt_key.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
nyt_key <- "yWbZaGu4aJnMzFhiAh5IVNUXLAwPOVbp"
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
cat(nyt_url)
nyt_key <- "A7heVZAYHGDjhSpjzWTSGnySjVQUyxB3"
nyt_data <-  fromJSON(nyt_url)
source('~/info project.R', echo=TRUE)
source('~/nyt_key.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/nyt_key.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/nyt_key.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
cat(nyt_url)
source('~/info project.R', echo=TRUE)
View(nyt_data)
nyt_data[["response"]]
source('~/info project.R', echo=TRUE)
View(nyt_data)
source('~/info project.R', echo=TRUE)
View(nyt_data)
View(nyt_url)
cat(nyt_url)
source('~/info project.R', echo=TRUE)
View(nyt_data)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
View(nyt_data)
nyt_data[["response"]][["docs"]]
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
install.packages("dplyr")
source('~/info project.R', echo=TRUE)
install.packages("tidyr")
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
source('~/info project.R', echo=TRUE)
nyt_data <- rbind_pages(pages)
View(nyt_data)
setwd("C:/Users/maxbe/Desktop/info_201_hw")
setwd("C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33")
setwd("C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33")
setwd("C:/Users/maxbe/Desktop")
setwd("C:/Users/maxbe/Desktop")
install.packages("tokenizer")
install.packages("tokenizers")
install.packages("tidytext")
twitter_data <- read.csv("/data/ug15_sample.csv")
twitter_data <- read.csv("/data/ug15_sample.csv")
setwd("C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33")
twitter_data <- read.csv("/data/ug15_sample.csv")
twitter_data <- read.csv("ug15_sample.csv")
twitter_data <- read.csv("data/ug15_sample.csv")
twitter_data <- read.csv("/data/ug15_sample.csv")
setwd("C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33")
twitter_data <- read.csv("\data\ug15_sample.csv")
twitter_data <- read.csv("/data/ug15_sample.csv")
twitter_data <- read.csv("/data/ug15_sample.csv")
twitter_data <- read.csv("data/ug15_sample.csv")
twitter_data <- read.csv("/ug15_sample.csv")
twitter_data <- read.csv("ug15_sample.csv")
setwd("C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33")
twitter_data <- read.csv("/blue-cat-33/data/aug15_sample.csv")
twitter_data <- read.csv("blue-cat-33/data/aug15_sample.csv")
twitter_data <- read.csv("/data/aug15_sample.csv")
twitter_data <- read.csv("//data/aug15_sample.csv")
twitter_data <- read.csv("/data/aug15_sample.csv")
twitter_data <- read.csv("//data/aug15_sample.csv")
twitter_data <- read.csv("data/aug15_sample.csv")
View(twitter_data)
words_df <- select(full_text, hashtags)
words_df <- select(twitter_data, full_text, hashtags)
View(words_df)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
tweets_as_vector <- dplyr::pull(words_df, full_text)
tweet_tokens <- unnest_tokens(word, words_df)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
words_df <- select(twitter_data, full_text, rownumber)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/R/info project.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/R/info project.R', echo=TRUE)
View(nyt_data)
write.csv(nyt_data, "nyt_data")
words_token <- unnest_tokens(words_df, txt)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(twitter_token_df)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(twitter_token_df)
View(twitter_token_df)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
sentiment <- get_sentiments("Bing")
sentiment <- get_sentiments("bing")
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(sentiment)
View(sentiment)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(twitter_token_df)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
cat(cry)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
cat("cry")
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(twitter_plot)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(twitter_plot)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(head(twitter_token_df,20))
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
View(twitter_plot)
View(top_twenty_words_twitter)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
twitter_plot + theme(axis.text.y = element_text( size = 8, angle = 90))
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
source('C:/Users/maxbe/Desktop/info_201_hw/blue-cat-33/words_plotting.R', echo=TRUE)
